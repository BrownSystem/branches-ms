
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model EBranchProduct
 * 
 */
export type EBranchProduct = $Result.DefaultSelection<Prisma.$EBranchProductPayload>
/**
 * Model EBranch
 * 
 */
export type EBranch = $Result.DefaultSelection<Prisma.$EBranchPayload>
/**
 * Model ENotification
 * 
 */
export type ENotification = $Result.DefaultSelection<Prisma.$ENotificationPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more EBranchProducts
 * const eBranchProducts = await prisma.eBranchProduct.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more EBranchProducts
   * const eBranchProducts = await prisma.eBranchProduct.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.eBranchProduct`: Exposes CRUD operations for the **EBranchProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EBranchProducts
    * const eBranchProducts = await prisma.eBranchProduct.findMany()
    * ```
    */
  get eBranchProduct(): Prisma.EBranchProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eBranch`: Exposes CRUD operations for the **EBranch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EBranches
    * const eBranches = await prisma.eBranch.findMany()
    * ```
    */
  get eBranch(): Prisma.EBranchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eNotification`: Exposes CRUD operations for the **ENotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ENotifications
    * const eNotifications = await prisma.eNotification.findMany()
    * ```
    */
  get eNotification(): Prisma.ENotificationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    EBranchProduct: 'EBranchProduct',
    EBranch: 'EBranch',
    ENotification: 'ENotification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "eBranchProduct" | "eBranch" | "eNotification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      EBranchProduct: {
        payload: Prisma.$EBranchProductPayload<ExtArgs>
        fields: Prisma.EBranchProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EBranchProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EBranchProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload>
          }
          findFirst: {
            args: Prisma.EBranchProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EBranchProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload>
          }
          findMany: {
            args: Prisma.EBranchProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload>[]
          }
          create: {
            args: Prisma.EBranchProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload>
          }
          createMany: {
            args: Prisma.EBranchProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EBranchProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload>[]
          }
          delete: {
            args: Prisma.EBranchProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload>
          }
          update: {
            args: Prisma.EBranchProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload>
          }
          deleteMany: {
            args: Prisma.EBranchProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EBranchProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EBranchProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload>[]
          }
          upsert: {
            args: Prisma.EBranchProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchProductPayload>
          }
          aggregate: {
            args: Prisma.EBranchProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEBranchProduct>
          }
          groupBy: {
            args: Prisma.EBranchProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<EBranchProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.EBranchProductCountArgs<ExtArgs>
            result: $Utils.Optional<EBranchProductCountAggregateOutputType> | number
          }
        }
      }
      EBranch: {
        payload: Prisma.$EBranchPayload<ExtArgs>
        fields: Prisma.EBranchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EBranchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EBranchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload>
          }
          findFirst: {
            args: Prisma.EBranchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EBranchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload>
          }
          findMany: {
            args: Prisma.EBranchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload>[]
          }
          create: {
            args: Prisma.EBranchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload>
          }
          createMany: {
            args: Prisma.EBranchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EBranchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload>[]
          }
          delete: {
            args: Prisma.EBranchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload>
          }
          update: {
            args: Prisma.EBranchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload>
          }
          deleteMany: {
            args: Prisma.EBranchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EBranchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EBranchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload>[]
          }
          upsert: {
            args: Prisma.EBranchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EBranchPayload>
          }
          aggregate: {
            args: Prisma.EBranchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEBranch>
          }
          groupBy: {
            args: Prisma.EBranchGroupByArgs<ExtArgs>
            result: $Utils.Optional<EBranchGroupByOutputType>[]
          }
          count: {
            args: Prisma.EBranchCountArgs<ExtArgs>
            result: $Utils.Optional<EBranchCountAggregateOutputType> | number
          }
        }
      }
      ENotification: {
        payload: Prisma.$ENotificationPayload<ExtArgs>
        fields: Prisma.ENotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ENotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ENotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload>
          }
          findFirst: {
            args: Prisma.ENotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ENotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload>
          }
          findMany: {
            args: Prisma.ENotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload>[]
          }
          create: {
            args: Prisma.ENotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload>
          }
          createMany: {
            args: Prisma.ENotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ENotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload>[]
          }
          delete: {
            args: Prisma.ENotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload>
          }
          update: {
            args: Prisma.ENotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload>
          }
          deleteMany: {
            args: Prisma.ENotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ENotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ENotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload>[]
          }
          upsert: {
            args: Prisma.ENotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ENotificationPayload>
          }
          aggregate: {
            args: Prisma.ENotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateENotification>
          }
          groupBy: {
            args: Prisma.ENotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ENotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ENotificationCountArgs<ExtArgs>
            result: $Utils.Optional<ENotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    eBranchProduct?: EBranchProductOmit
    eBranch?: EBranchOmit
    eNotification?: ENotificationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EBranchCountOutputType
   */

  export type EBranchCountOutputType = {
    branchProducts: number
    Notification: number
  }

  export type EBranchCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branchProducts?: boolean | EBranchCountOutputTypeCountBranchProductsArgs
    Notification?: boolean | EBranchCountOutputTypeCountNotificationArgs
  }

  // Custom InputTypes
  /**
   * EBranchCountOutputType without action
   */
  export type EBranchCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchCountOutputType
     */
    select?: EBranchCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EBranchCountOutputType without action
   */
  export type EBranchCountOutputTypeCountBranchProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EBranchProductWhereInput
  }

  /**
   * EBranchCountOutputType without action
   */
  export type EBranchCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ENotificationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model EBranchProduct
   */

  export type AggregateEBranchProduct = {
    _count: EBranchProductCountAggregateOutputType | null
    _avg: EBranchProductAvgAggregateOutputType | null
    _sum: EBranchProductSumAggregateOutputType | null
    _min: EBranchProductMinAggregateOutputType | null
    _max: EBranchProductMaxAggregateOutputType | null
  }

  export type EBranchProductAvgAggregateOutputType = {
    stock: number | null
  }

  export type EBranchProductSumAggregateOutputType = {
    stock: number | null
  }

  export type EBranchProductMinAggregateOutputType = {
    id: string | null
    branchId: string | null
    productId: string | null
    colorCode: string | null
    stock: number | null
    available: boolean | null
  }

  export type EBranchProductMaxAggregateOutputType = {
    id: string | null
    branchId: string | null
    productId: string | null
    colorCode: string | null
    stock: number | null
    available: boolean | null
  }

  export type EBranchProductCountAggregateOutputType = {
    id: number
    branchId: number
    productId: number
    colorCode: number
    stock: number
    available: number
    _all: number
  }


  export type EBranchProductAvgAggregateInputType = {
    stock?: true
  }

  export type EBranchProductSumAggregateInputType = {
    stock?: true
  }

  export type EBranchProductMinAggregateInputType = {
    id?: true
    branchId?: true
    productId?: true
    colorCode?: true
    stock?: true
    available?: true
  }

  export type EBranchProductMaxAggregateInputType = {
    id?: true
    branchId?: true
    productId?: true
    colorCode?: true
    stock?: true
    available?: true
  }

  export type EBranchProductCountAggregateInputType = {
    id?: true
    branchId?: true
    productId?: true
    colorCode?: true
    stock?: true
    available?: true
    _all?: true
  }

  export type EBranchProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EBranchProduct to aggregate.
     */
    where?: EBranchProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBranchProducts to fetch.
     */
    orderBy?: EBranchProductOrderByWithRelationInput | EBranchProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EBranchProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBranchProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBranchProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EBranchProducts
    **/
    _count?: true | EBranchProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EBranchProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EBranchProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EBranchProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EBranchProductMaxAggregateInputType
  }

  export type GetEBranchProductAggregateType<T extends EBranchProductAggregateArgs> = {
        [P in keyof T & keyof AggregateEBranchProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEBranchProduct[P]>
      : GetScalarType<T[P], AggregateEBranchProduct[P]>
  }




  export type EBranchProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EBranchProductWhereInput
    orderBy?: EBranchProductOrderByWithAggregationInput | EBranchProductOrderByWithAggregationInput[]
    by: EBranchProductScalarFieldEnum[] | EBranchProductScalarFieldEnum
    having?: EBranchProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EBranchProductCountAggregateInputType | true
    _avg?: EBranchProductAvgAggregateInputType
    _sum?: EBranchProductSumAggregateInputType
    _min?: EBranchProductMinAggregateInputType
    _max?: EBranchProductMaxAggregateInputType
  }

  export type EBranchProductGroupByOutputType = {
    id: string
    branchId: string
    productId: string
    colorCode: string
    stock: number
    available: boolean
    _count: EBranchProductCountAggregateOutputType | null
    _avg: EBranchProductAvgAggregateOutputType | null
    _sum: EBranchProductSumAggregateOutputType | null
    _min: EBranchProductMinAggregateOutputType | null
    _max: EBranchProductMaxAggregateOutputType | null
  }

  type GetEBranchProductGroupByPayload<T extends EBranchProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EBranchProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EBranchProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EBranchProductGroupByOutputType[P]>
            : GetScalarType<T[P], EBranchProductGroupByOutputType[P]>
        }
      >
    >


  export type EBranchProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    productId?: boolean
    colorCode?: boolean
    stock?: boolean
    available?: boolean
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eBranchProduct"]>

  export type EBranchProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    productId?: boolean
    colorCode?: boolean
    stock?: boolean
    available?: boolean
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eBranchProduct"]>

  export type EBranchProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    productId?: boolean
    colorCode?: boolean
    stock?: boolean
    available?: boolean
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eBranchProduct"]>

  export type EBranchProductSelectScalar = {
    id?: boolean
    branchId?: boolean
    productId?: boolean
    colorCode?: boolean
    stock?: boolean
    available?: boolean
  }

  export type EBranchProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "branchId" | "productId" | "colorCode" | "stock" | "available", ExtArgs["result"]["eBranchProduct"]>
  export type EBranchProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }
  export type EBranchProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }
  export type EBranchProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }

  export type $EBranchProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EBranchProduct"
    objects: {
      branch: Prisma.$EBranchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      branchId: string
      productId: string
      colorCode: string
      stock: number
      available: boolean
    }, ExtArgs["result"]["eBranchProduct"]>
    composites: {}
  }

  type EBranchProductGetPayload<S extends boolean | null | undefined | EBranchProductDefaultArgs> = $Result.GetResult<Prisma.$EBranchProductPayload, S>

  type EBranchProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EBranchProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EBranchProductCountAggregateInputType | true
    }

  export interface EBranchProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EBranchProduct'], meta: { name: 'EBranchProduct' } }
    /**
     * Find zero or one EBranchProduct that matches the filter.
     * @param {EBranchProductFindUniqueArgs} args - Arguments to find a EBranchProduct
     * @example
     * // Get one EBranchProduct
     * const eBranchProduct = await prisma.eBranchProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EBranchProductFindUniqueArgs>(args: SelectSubset<T, EBranchProductFindUniqueArgs<ExtArgs>>): Prisma__EBranchProductClient<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EBranchProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EBranchProductFindUniqueOrThrowArgs} args - Arguments to find a EBranchProduct
     * @example
     * // Get one EBranchProduct
     * const eBranchProduct = await prisma.eBranchProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EBranchProductFindUniqueOrThrowArgs>(args: SelectSubset<T, EBranchProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EBranchProductClient<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EBranchProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchProductFindFirstArgs} args - Arguments to find a EBranchProduct
     * @example
     * // Get one EBranchProduct
     * const eBranchProduct = await prisma.eBranchProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EBranchProductFindFirstArgs>(args?: SelectSubset<T, EBranchProductFindFirstArgs<ExtArgs>>): Prisma__EBranchProductClient<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EBranchProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchProductFindFirstOrThrowArgs} args - Arguments to find a EBranchProduct
     * @example
     * // Get one EBranchProduct
     * const eBranchProduct = await prisma.eBranchProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EBranchProductFindFirstOrThrowArgs>(args?: SelectSubset<T, EBranchProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__EBranchProductClient<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EBranchProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EBranchProducts
     * const eBranchProducts = await prisma.eBranchProduct.findMany()
     * 
     * // Get first 10 EBranchProducts
     * const eBranchProducts = await prisma.eBranchProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eBranchProductWithIdOnly = await prisma.eBranchProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EBranchProductFindManyArgs>(args?: SelectSubset<T, EBranchProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EBranchProduct.
     * @param {EBranchProductCreateArgs} args - Arguments to create a EBranchProduct.
     * @example
     * // Create one EBranchProduct
     * const EBranchProduct = await prisma.eBranchProduct.create({
     *   data: {
     *     // ... data to create a EBranchProduct
     *   }
     * })
     * 
     */
    create<T extends EBranchProductCreateArgs>(args: SelectSubset<T, EBranchProductCreateArgs<ExtArgs>>): Prisma__EBranchProductClient<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EBranchProducts.
     * @param {EBranchProductCreateManyArgs} args - Arguments to create many EBranchProducts.
     * @example
     * // Create many EBranchProducts
     * const eBranchProduct = await prisma.eBranchProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EBranchProductCreateManyArgs>(args?: SelectSubset<T, EBranchProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EBranchProducts and returns the data saved in the database.
     * @param {EBranchProductCreateManyAndReturnArgs} args - Arguments to create many EBranchProducts.
     * @example
     * // Create many EBranchProducts
     * const eBranchProduct = await prisma.eBranchProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EBranchProducts and only return the `id`
     * const eBranchProductWithIdOnly = await prisma.eBranchProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EBranchProductCreateManyAndReturnArgs>(args?: SelectSubset<T, EBranchProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EBranchProduct.
     * @param {EBranchProductDeleteArgs} args - Arguments to delete one EBranchProduct.
     * @example
     * // Delete one EBranchProduct
     * const EBranchProduct = await prisma.eBranchProduct.delete({
     *   where: {
     *     // ... filter to delete one EBranchProduct
     *   }
     * })
     * 
     */
    delete<T extends EBranchProductDeleteArgs>(args: SelectSubset<T, EBranchProductDeleteArgs<ExtArgs>>): Prisma__EBranchProductClient<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EBranchProduct.
     * @param {EBranchProductUpdateArgs} args - Arguments to update one EBranchProduct.
     * @example
     * // Update one EBranchProduct
     * const eBranchProduct = await prisma.eBranchProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EBranchProductUpdateArgs>(args: SelectSubset<T, EBranchProductUpdateArgs<ExtArgs>>): Prisma__EBranchProductClient<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EBranchProducts.
     * @param {EBranchProductDeleteManyArgs} args - Arguments to filter EBranchProducts to delete.
     * @example
     * // Delete a few EBranchProducts
     * const { count } = await prisma.eBranchProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EBranchProductDeleteManyArgs>(args?: SelectSubset<T, EBranchProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EBranchProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EBranchProducts
     * const eBranchProduct = await prisma.eBranchProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EBranchProductUpdateManyArgs>(args: SelectSubset<T, EBranchProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EBranchProducts and returns the data updated in the database.
     * @param {EBranchProductUpdateManyAndReturnArgs} args - Arguments to update many EBranchProducts.
     * @example
     * // Update many EBranchProducts
     * const eBranchProduct = await prisma.eBranchProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EBranchProducts and only return the `id`
     * const eBranchProductWithIdOnly = await prisma.eBranchProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EBranchProductUpdateManyAndReturnArgs>(args: SelectSubset<T, EBranchProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EBranchProduct.
     * @param {EBranchProductUpsertArgs} args - Arguments to update or create a EBranchProduct.
     * @example
     * // Update or create a EBranchProduct
     * const eBranchProduct = await prisma.eBranchProduct.upsert({
     *   create: {
     *     // ... data to create a EBranchProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EBranchProduct we want to update
     *   }
     * })
     */
    upsert<T extends EBranchProductUpsertArgs>(args: SelectSubset<T, EBranchProductUpsertArgs<ExtArgs>>): Prisma__EBranchProductClient<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EBranchProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchProductCountArgs} args - Arguments to filter EBranchProducts to count.
     * @example
     * // Count the number of EBranchProducts
     * const count = await prisma.eBranchProduct.count({
     *   where: {
     *     // ... the filter for the EBranchProducts we want to count
     *   }
     * })
    **/
    count<T extends EBranchProductCountArgs>(
      args?: Subset<T, EBranchProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EBranchProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EBranchProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EBranchProductAggregateArgs>(args: Subset<T, EBranchProductAggregateArgs>): Prisma.PrismaPromise<GetEBranchProductAggregateType<T>>

    /**
     * Group by EBranchProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EBranchProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EBranchProductGroupByArgs['orderBy'] }
        : { orderBy?: EBranchProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EBranchProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEBranchProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EBranchProduct model
   */
  readonly fields: EBranchProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EBranchProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EBranchProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends EBranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EBranchDefaultArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EBranchProduct model
   */
  interface EBranchProductFieldRefs {
    readonly id: FieldRef<"EBranchProduct", 'String'>
    readonly branchId: FieldRef<"EBranchProduct", 'String'>
    readonly productId: FieldRef<"EBranchProduct", 'String'>
    readonly colorCode: FieldRef<"EBranchProduct", 'String'>
    readonly stock: FieldRef<"EBranchProduct", 'Int'>
    readonly available: FieldRef<"EBranchProduct", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * EBranchProduct findUnique
   */
  export type EBranchProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    /**
     * Filter, which EBranchProduct to fetch.
     */
    where: EBranchProductWhereUniqueInput
  }

  /**
   * EBranchProduct findUniqueOrThrow
   */
  export type EBranchProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    /**
     * Filter, which EBranchProduct to fetch.
     */
    where: EBranchProductWhereUniqueInput
  }

  /**
   * EBranchProduct findFirst
   */
  export type EBranchProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    /**
     * Filter, which EBranchProduct to fetch.
     */
    where?: EBranchProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBranchProducts to fetch.
     */
    orderBy?: EBranchProductOrderByWithRelationInput | EBranchProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EBranchProducts.
     */
    cursor?: EBranchProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBranchProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBranchProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EBranchProducts.
     */
    distinct?: EBranchProductScalarFieldEnum | EBranchProductScalarFieldEnum[]
  }

  /**
   * EBranchProduct findFirstOrThrow
   */
  export type EBranchProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    /**
     * Filter, which EBranchProduct to fetch.
     */
    where?: EBranchProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBranchProducts to fetch.
     */
    orderBy?: EBranchProductOrderByWithRelationInput | EBranchProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EBranchProducts.
     */
    cursor?: EBranchProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBranchProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBranchProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EBranchProducts.
     */
    distinct?: EBranchProductScalarFieldEnum | EBranchProductScalarFieldEnum[]
  }

  /**
   * EBranchProduct findMany
   */
  export type EBranchProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    /**
     * Filter, which EBranchProducts to fetch.
     */
    where?: EBranchProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBranchProducts to fetch.
     */
    orderBy?: EBranchProductOrderByWithRelationInput | EBranchProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EBranchProducts.
     */
    cursor?: EBranchProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBranchProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBranchProducts.
     */
    skip?: number
    distinct?: EBranchProductScalarFieldEnum | EBranchProductScalarFieldEnum[]
  }

  /**
   * EBranchProduct create
   */
  export type EBranchProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    /**
     * The data needed to create a EBranchProduct.
     */
    data: XOR<EBranchProductCreateInput, EBranchProductUncheckedCreateInput>
  }

  /**
   * EBranchProduct createMany
   */
  export type EBranchProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EBranchProducts.
     */
    data: EBranchProductCreateManyInput | EBranchProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EBranchProduct createManyAndReturn
   */
  export type EBranchProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * The data used to create many EBranchProducts.
     */
    data: EBranchProductCreateManyInput | EBranchProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EBranchProduct update
   */
  export type EBranchProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    /**
     * The data needed to update a EBranchProduct.
     */
    data: XOR<EBranchProductUpdateInput, EBranchProductUncheckedUpdateInput>
    /**
     * Choose, which EBranchProduct to update.
     */
    where: EBranchProductWhereUniqueInput
  }

  /**
   * EBranchProduct updateMany
   */
  export type EBranchProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EBranchProducts.
     */
    data: XOR<EBranchProductUpdateManyMutationInput, EBranchProductUncheckedUpdateManyInput>
    /**
     * Filter which EBranchProducts to update
     */
    where?: EBranchProductWhereInput
    /**
     * Limit how many EBranchProducts to update.
     */
    limit?: number
  }

  /**
   * EBranchProduct updateManyAndReturn
   */
  export type EBranchProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * The data used to update EBranchProducts.
     */
    data: XOR<EBranchProductUpdateManyMutationInput, EBranchProductUncheckedUpdateManyInput>
    /**
     * Filter which EBranchProducts to update
     */
    where?: EBranchProductWhereInput
    /**
     * Limit how many EBranchProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * EBranchProduct upsert
   */
  export type EBranchProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    /**
     * The filter to search for the EBranchProduct to update in case it exists.
     */
    where: EBranchProductWhereUniqueInput
    /**
     * In case the EBranchProduct found by the `where` argument doesn't exist, create a new EBranchProduct with this data.
     */
    create: XOR<EBranchProductCreateInput, EBranchProductUncheckedCreateInput>
    /**
     * In case the EBranchProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EBranchProductUpdateInput, EBranchProductUncheckedUpdateInput>
  }

  /**
   * EBranchProduct delete
   */
  export type EBranchProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    /**
     * Filter which EBranchProduct to delete.
     */
    where: EBranchProductWhereUniqueInput
  }

  /**
   * EBranchProduct deleteMany
   */
  export type EBranchProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EBranchProducts to delete
     */
    where?: EBranchProductWhereInput
    /**
     * Limit how many EBranchProducts to delete.
     */
    limit?: number
  }

  /**
   * EBranchProduct without action
   */
  export type EBranchProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
  }


  /**
   * Model EBranch
   */

  export type AggregateEBranch = {
    _count: EBranchCountAggregateOutputType | null
    _min: EBranchMinAggregateOutputType | null
    _max: EBranchMaxAggregateOutputType | null
  }

  export type EBranchMinAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    available: boolean | null
  }

  export type EBranchMaxAggregateOutputType = {
    id: string | null
    name: string | null
    location: string | null
    available: boolean | null
  }

  export type EBranchCountAggregateOutputType = {
    id: number
    name: number
    location: number
    available: number
    _all: number
  }


  export type EBranchMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
    available?: true
  }

  export type EBranchMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
    available?: true
  }

  export type EBranchCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    available?: true
    _all?: true
  }

  export type EBranchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EBranch to aggregate.
     */
    where?: EBranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBranches to fetch.
     */
    orderBy?: EBranchOrderByWithRelationInput | EBranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EBranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBranches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBranches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EBranches
    **/
    _count?: true | EBranchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EBranchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EBranchMaxAggregateInputType
  }

  export type GetEBranchAggregateType<T extends EBranchAggregateArgs> = {
        [P in keyof T & keyof AggregateEBranch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEBranch[P]>
      : GetScalarType<T[P], AggregateEBranch[P]>
  }




  export type EBranchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EBranchWhereInput
    orderBy?: EBranchOrderByWithAggregationInput | EBranchOrderByWithAggregationInput[]
    by: EBranchScalarFieldEnum[] | EBranchScalarFieldEnum
    having?: EBranchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EBranchCountAggregateInputType | true
    _min?: EBranchMinAggregateInputType
    _max?: EBranchMaxAggregateInputType
  }

  export type EBranchGroupByOutputType = {
    id: string
    name: string
    location: string
    available: boolean
    _count: EBranchCountAggregateOutputType | null
    _min: EBranchMinAggregateOutputType | null
    _max: EBranchMaxAggregateOutputType | null
  }

  type GetEBranchGroupByPayload<T extends EBranchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EBranchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EBranchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EBranchGroupByOutputType[P]>
            : GetScalarType<T[P], EBranchGroupByOutputType[P]>
        }
      >
    >


  export type EBranchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    available?: boolean
    branchProducts?: boolean | EBranch$branchProductsArgs<ExtArgs>
    Notification?: boolean | EBranch$NotificationArgs<ExtArgs>
    _count?: boolean | EBranchCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eBranch"]>

  export type EBranchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    available?: boolean
  }, ExtArgs["result"]["eBranch"]>

  export type EBranchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    available?: boolean
  }, ExtArgs["result"]["eBranch"]>

  export type EBranchSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    available?: boolean
  }

  export type EBranchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "location" | "available", ExtArgs["result"]["eBranch"]>
  export type EBranchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branchProducts?: boolean | EBranch$branchProductsArgs<ExtArgs>
    Notification?: boolean | EBranch$NotificationArgs<ExtArgs>
    _count?: boolean | EBranchCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EBranchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EBranchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EBranchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EBranch"
    objects: {
      branchProducts: Prisma.$EBranchProductPayload<ExtArgs>[]
      Notification: Prisma.$ENotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      location: string
      available: boolean
    }, ExtArgs["result"]["eBranch"]>
    composites: {}
  }

  type EBranchGetPayload<S extends boolean | null | undefined | EBranchDefaultArgs> = $Result.GetResult<Prisma.$EBranchPayload, S>

  type EBranchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EBranchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EBranchCountAggregateInputType | true
    }

  export interface EBranchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EBranch'], meta: { name: 'EBranch' } }
    /**
     * Find zero or one EBranch that matches the filter.
     * @param {EBranchFindUniqueArgs} args - Arguments to find a EBranch
     * @example
     * // Get one EBranch
     * const eBranch = await prisma.eBranch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EBranchFindUniqueArgs>(args: SelectSubset<T, EBranchFindUniqueArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EBranch that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EBranchFindUniqueOrThrowArgs} args - Arguments to find a EBranch
     * @example
     * // Get one EBranch
     * const eBranch = await prisma.eBranch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EBranchFindUniqueOrThrowArgs>(args: SelectSubset<T, EBranchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EBranch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchFindFirstArgs} args - Arguments to find a EBranch
     * @example
     * // Get one EBranch
     * const eBranch = await prisma.eBranch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EBranchFindFirstArgs>(args?: SelectSubset<T, EBranchFindFirstArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EBranch that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchFindFirstOrThrowArgs} args - Arguments to find a EBranch
     * @example
     * // Get one EBranch
     * const eBranch = await prisma.eBranch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EBranchFindFirstOrThrowArgs>(args?: SelectSubset<T, EBranchFindFirstOrThrowArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EBranches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EBranches
     * const eBranches = await prisma.eBranch.findMany()
     * 
     * // Get first 10 EBranches
     * const eBranches = await prisma.eBranch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eBranchWithIdOnly = await prisma.eBranch.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EBranchFindManyArgs>(args?: SelectSubset<T, EBranchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EBranch.
     * @param {EBranchCreateArgs} args - Arguments to create a EBranch.
     * @example
     * // Create one EBranch
     * const EBranch = await prisma.eBranch.create({
     *   data: {
     *     // ... data to create a EBranch
     *   }
     * })
     * 
     */
    create<T extends EBranchCreateArgs>(args: SelectSubset<T, EBranchCreateArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EBranches.
     * @param {EBranchCreateManyArgs} args - Arguments to create many EBranches.
     * @example
     * // Create many EBranches
     * const eBranch = await prisma.eBranch.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EBranchCreateManyArgs>(args?: SelectSubset<T, EBranchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EBranches and returns the data saved in the database.
     * @param {EBranchCreateManyAndReturnArgs} args - Arguments to create many EBranches.
     * @example
     * // Create many EBranches
     * const eBranch = await prisma.eBranch.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EBranches and only return the `id`
     * const eBranchWithIdOnly = await prisma.eBranch.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EBranchCreateManyAndReturnArgs>(args?: SelectSubset<T, EBranchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a EBranch.
     * @param {EBranchDeleteArgs} args - Arguments to delete one EBranch.
     * @example
     * // Delete one EBranch
     * const EBranch = await prisma.eBranch.delete({
     *   where: {
     *     // ... filter to delete one EBranch
     *   }
     * })
     * 
     */
    delete<T extends EBranchDeleteArgs>(args: SelectSubset<T, EBranchDeleteArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EBranch.
     * @param {EBranchUpdateArgs} args - Arguments to update one EBranch.
     * @example
     * // Update one EBranch
     * const eBranch = await prisma.eBranch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EBranchUpdateArgs>(args: SelectSubset<T, EBranchUpdateArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EBranches.
     * @param {EBranchDeleteManyArgs} args - Arguments to filter EBranches to delete.
     * @example
     * // Delete a few EBranches
     * const { count } = await prisma.eBranch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EBranchDeleteManyArgs>(args?: SelectSubset<T, EBranchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EBranches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EBranches
     * const eBranch = await prisma.eBranch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EBranchUpdateManyArgs>(args: SelectSubset<T, EBranchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EBranches and returns the data updated in the database.
     * @param {EBranchUpdateManyAndReturnArgs} args - Arguments to update many EBranches.
     * @example
     * // Update many EBranches
     * const eBranch = await prisma.eBranch.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more EBranches and only return the `id`
     * const eBranchWithIdOnly = await prisma.eBranch.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EBranchUpdateManyAndReturnArgs>(args: SelectSubset<T, EBranchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one EBranch.
     * @param {EBranchUpsertArgs} args - Arguments to update or create a EBranch.
     * @example
     * // Update or create a EBranch
     * const eBranch = await prisma.eBranch.upsert({
     *   create: {
     *     // ... data to create a EBranch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EBranch we want to update
     *   }
     * })
     */
    upsert<T extends EBranchUpsertArgs>(args: SelectSubset<T, EBranchUpsertArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EBranches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchCountArgs} args - Arguments to filter EBranches to count.
     * @example
     * // Count the number of EBranches
     * const count = await prisma.eBranch.count({
     *   where: {
     *     // ... the filter for the EBranches we want to count
     *   }
     * })
    **/
    count<T extends EBranchCountArgs>(
      args?: Subset<T, EBranchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EBranchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EBranch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EBranchAggregateArgs>(args: Subset<T, EBranchAggregateArgs>): Prisma.PrismaPromise<GetEBranchAggregateType<T>>

    /**
     * Group by EBranch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EBranchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EBranchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EBranchGroupByArgs['orderBy'] }
        : { orderBy?: EBranchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EBranchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEBranchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EBranch model
   */
  readonly fields: EBranchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EBranch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EBranchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branchProducts<T extends EBranch$branchProductsArgs<ExtArgs> = {}>(args?: Subset<T, EBranch$branchProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EBranchProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Notification<T extends EBranch$NotificationArgs<ExtArgs> = {}>(args?: Subset<T, EBranch$NotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EBranch model
   */
  interface EBranchFieldRefs {
    readonly id: FieldRef<"EBranch", 'String'>
    readonly name: FieldRef<"EBranch", 'String'>
    readonly location: FieldRef<"EBranch", 'String'>
    readonly available: FieldRef<"EBranch", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * EBranch findUnique
   */
  export type EBranchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
    /**
     * Filter, which EBranch to fetch.
     */
    where: EBranchWhereUniqueInput
  }

  /**
   * EBranch findUniqueOrThrow
   */
  export type EBranchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
    /**
     * Filter, which EBranch to fetch.
     */
    where: EBranchWhereUniqueInput
  }

  /**
   * EBranch findFirst
   */
  export type EBranchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
    /**
     * Filter, which EBranch to fetch.
     */
    where?: EBranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBranches to fetch.
     */
    orderBy?: EBranchOrderByWithRelationInput | EBranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EBranches.
     */
    cursor?: EBranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBranches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBranches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EBranches.
     */
    distinct?: EBranchScalarFieldEnum | EBranchScalarFieldEnum[]
  }

  /**
   * EBranch findFirstOrThrow
   */
  export type EBranchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
    /**
     * Filter, which EBranch to fetch.
     */
    where?: EBranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBranches to fetch.
     */
    orderBy?: EBranchOrderByWithRelationInput | EBranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EBranches.
     */
    cursor?: EBranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBranches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBranches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EBranches.
     */
    distinct?: EBranchScalarFieldEnum | EBranchScalarFieldEnum[]
  }

  /**
   * EBranch findMany
   */
  export type EBranchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
    /**
     * Filter, which EBranches to fetch.
     */
    where?: EBranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EBranches to fetch.
     */
    orderBy?: EBranchOrderByWithRelationInput | EBranchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EBranches.
     */
    cursor?: EBranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EBranches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EBranches.
     */
    skip?: number
    distinct?: EBranchScalarFieldEnum | EBranchScalarFieldEnum[]
  }

  /**
   * EBranch create
   */
  export type EBranchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
    /**
     * The data needed to create a EBranch.
     */
    data: XOR<EBranchCreateInput, EBranchUncheckedCreateInput>
  }

  /**
   * EBranch createMany
   */
  export type EBranchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EBranches.
     */
    data: EBranchCreateManyInput | EBranchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EBranch createManyAndReturn
   */
  export type EBranchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * The data used to create many EBranches.
     */
    data: EBranchCreateManyInput | EBranchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EBranch update
   */
  export type EBranchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
    /**
     * The data needed to update a EBranch.
     */
    data: XOR<EBranchUpdateInput, EBranchUncheckedUpdateInput>
    /**
     * Choose, which EBranch to update.
     */
    where: EBranchWhereUniqueInput
  }

  /**
   * EBranch updateMany
   */
  export type EBranchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EBranches.
     */
    data: XOR<EBranchUpdateManyMutationInput, EBranchUncheckedUpdateManyInput>
    /**
     * Filter which EBranches to update
     */
    where?: EBranchWhereInput
    /**
     * Limit how many EBranches to update.
     */
    limit?: number
  }

  /**
   * EBranch updateManyAndReturn
   */
  export type EBranchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * The data used to update EBranches.
     */
    data: XOR<EBranchUpdateManyMutationInput, EBranchUncheckedUpdateManyInput>
    /**
     * Filter which EBranches to update
     */
    where?: EBranchWhereInput
    /**
     * Limit how many EBranches to update.
     */
    limit?: number
  }

  /**
   * EBranch upsert
   */
  export type EBranchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
    /**
     * The filter to search for the EBranch to update in case it exists.
     */
    where: EBranchWhereUniqueInput
    /**
     * In case the EBranch found by the `where` argument doesn't exist, create a new EBranch with this data.
     */
    create: XOR<EBranchCreateInput, EBranchUncheckedCreateInput>
    /**
     * In case the EBranch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EBranchUpdateInput, EBranchUncheckedUpdateInput>
  }

  /**
   * EBranch delete
   */
  export type EBranchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
    /**
     * Filter which EBranch to delete.
     */
    where: EBranchWhereUniqueInput
  }

  /**
   * EBranch deleteMany
   */
  export type EBranchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EBranches to delete
     */
    where?: EBranchWhereInput
    /**
     * Limit how many EBranches to delete.
     */
    limit?: number
  }

  /**
   * EBranch.branchProducts
   */
  export type EBranch$branchProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranchProduct
     */
    select?: EBranchProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranchProduct
     */
    omit?: EBranchProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchProductInclude<ExtArgs> | null
    where?: EBranchProductWhereInput
    orderBy?: EBranchProductOrderByWithRelationInput | EBranchProductOrderByWithRelationInput[]
    cursor?: EBranchProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EBranchProductScalarFieldEnum | EBranchProductScalarFieldEnum[]
  }

  /**
   * EBranch.Notification
   */
  export type EBranch$NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    where?: ENotificationWhereInput
    orderBy?: ENotificationOrderByWithRelationInput | ENotificationOrderByWithRelationInput[]
    cursor?: ENotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ENotificationScalarFieldEnum | ENotificationScalarFieldEnum[]
  }

  /**
   * EBranch without action
   */
  export type EBranchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EBranch
     */
    select?: EBranchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EBranch
     */
    omit?: EBranchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EBranchInclude<ExtArgs> | null
  }


  /**
   * Model ENotification
   */

  export type AggregateENotification = {
    _count: ENotificationCountAggregateOutputType | null
    _min: ENotificationMinAggregateOutputType | null
    _max: ENotificationMaxAggregateOutputType | null
  }

  export type ENotificationMinAggregateOutputType = {
    id: string | null
    branchId: string | null
    type: string | null
    title: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
    available: boolean | null
  }

  export type ENotificationMaxAggregateOutputType = {
    id: string | null
    branchId: string | null
    type: string | null
    title: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
    available: boolean | null
  }

  export type ENotificationCountAggregateOutputType = {
    id: number
    branchId: number
    type: number
    title: number
    message: number
    read: number
    createdAt: number
    available: number
    _all: number
  }


  export type ENotificationMinAggregateInputType = {
    id?: true
    branchId?: true
    type?: true
    title?: true
    message?: true
    read?: true
    createdAt?: true
    available?: true
  }

  export type ENotificationMaxAggregateInputType = {
    id?: true
    branchId?: true
    type?: true
    title?: true
    message?: true
    read?: true
    createdAt?: true
    available?: true
  }

  export type ENotificationCountAggregateInputType = {
    id?: true
    branchId?: true
    type?: true
    title?: true
    message?: true
    read?: true
    createdAt?: true
    available?: true
    _all?: true
  }

  export type ENotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ENotification to aggregate.
     */
    where?: ENotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ENotifications to fetch.
     */
    orderBy?: ENotificationOrderByWithRelationInput | ENotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ENotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ENotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ENotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ENotifications
    **/
    _count?: true | ENotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ENotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ENotificationMaxAggregateInputType
  }

  export type GetENotificationAggregateType<T extends ENotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateENotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateENotification[P]>
      : GetScalarType<T[P], AggregateENotification[P]>
  }




  export type ENotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ENotificationWhereInput
    orderBy?: ENotificationOrderByWithAggregationInput | ENotificationOrderByWithAggregationInput[]
    by: ENotificationScalarFieldEnum[] | ENotificationScalarFieldEnum
    having?: ENotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ENotificationCountAggregateInputType | true
    _min?: ENotificationMinAggregateInputType
    _max?: ENotificationMaxAggregateInputType
  }

  export type ENotificationGroupByOutputType = {
    id: string
    branchId: string
    type: string
    title: string
    message: string
    read: boolean
    createdAt: Date
    available: boolean
    _count: ENotificationCountAggregateOutputType | null
    _min: ENotificationMinAggregateOutputType | null
    _max: ENotificationMaxAggregateOutputType | null
  }

  type GetENotificationGroupByPayload<T extends ENotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ENotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ENotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ENotificationGroupByOutputType[P]>
            : GetScalarType<T[P], ENotificationGroupByOutputType[P]>
        }
      >
    >


  export type ENotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    createdAt?: boolean
    available?: boolean
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eNotification"]>

  export type ENotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    createdAt?: boolean
    available?: boolean
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eNotification"]>

  export type ENotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    branchId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    createdAt?: boolean
    available?: boolean
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eNotification"]>

  export type ENotificationSelectScalar = {
    id?: boolean
    branchId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    read?: boolean
    createdAt?: boolean
    available?: boolean
  }

  export type ENotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "branchId" | "type" | "title" | "message" | "read" | "createdAt" | "available", ExtArgs["result"]["eNotification"]>
  export type ENotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }
  export type ENotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }
  export type ENotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    branch?: boolean | EBranchDefaultArgs<ExtArgs>
  }

  export type $ENotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ENotification"
    objects: {
      branch: Prisma.$EBranchPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      branchId: string
      type: string
      title: string
      message: string
      read: boolean
      createdAt: Date
      available: boolean
    }, ExtArgs["result"]["eNotification"]>
    composites: {}
  }

  type ENotificationGetPayload<S extends boolean | null | undefined | ENotificationDefaultArgs> = $Result.GetResult<Prisma.$ENotificationPayload, S>

  type ENotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ENotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ENotificationCountAggregateInputType | true
    }

  export interface ENotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ENotification'], meta: { name: 'ENotification' } }
    /**
     * Find zero or one ENotification that matches the filter.
     * @param {ENotificationFindUniqueArgs} args - Arguments to find a ENotification
     * @example
     * // Get one ENotification
     * const eNotification = await prisma.eNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ENotificationFindUniqueArgs>(args: SelectSubset<T, ENotificationFindUniqueArgs<ExtArgs>>): Prisma__ENotificationClient<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ENotification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ENotificationFindUniqueOrThrowArgs} args - Arguments to find a ENotification
     * @example
     * // Get one ENotification
     * const eNotification = await prisma.eNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ENotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, ENotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ENotificationClient<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ENotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ENotificationFindFirstArgs} args - Arguments to find a ENotification
     * @example
     * // Get one ENotification
     * const eNotification = await prisma.eNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ENotificationFindFirstArgs>(args?: SelectSubset<T, ENotificationFindFirstArgs<ExtArgs>>): Prisma__ENotificationClient<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ENotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ENotificationFindFirstOrThrowArgs} args - Arguments to find a ENotification
     * @example
     * // Get one ENotification
     * const eNotification = await prisma.eNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ENotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, ENotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ENotificationClient<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ENotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ENotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ENotifications
     * const eNotifications = await prisma.eNotification.findMany()
     * 
     * // Get first 10 ENotifications
     * const eNotifications = await prisma.eNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eNotificationWithIdOnly = await prisma.eNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ENotificationFindManyArgs>(args?: SelectSubset<T, ENotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ENotification.
     * @param {ENotificationCreateArgs} args - Arguments to create a ENotification.
     * @example
     * // Create one ENotification
     * const ENotification = await prisma.eNotification.create({
     *   data: {
     *     // ... data to create a ENotification
     *   }
     * })
     * 
     */
    create<T extends ENotificationCreateArgs>(args: SelectSubset<T, ENotificationCreateArgs<ExtArgs>>): Prisma__ENotificationClient<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ENotifications.
     * @param {ENotificationCreateManyArgs} args - Arguments to create many ENotifications.
     * @example
     * // Create many ENotifications
     * const eNotification = await prisma.eNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ENotificationCreateManyArgs>(args?: SelectSubset<T, ENotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ENotifications and returns the data saved in the database.
     * @param {ENotificationCreateManyAndReturnArgs} args - Arguments to create many ENotifications.
     * @example
     * // Create many ENotifications
     * const eNotification = await prisma.eNotification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ENotifications and only return the `id`
     * const eNotificationWithIdOnly = await prisma.eNotification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ENotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, ENotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ENotification.
     * @param {ENotificationDeleteArgs} args - Arguments to delete one ENotification.
     * @example
     * // Delete one ENotification
     * const ENotification = await prisma.eNotification.delete({
     *   where: {
     *     // ... filter to delete one ENotification
     *   }
     * })
     * 
     */
    delete<T extends ENotificationDeleteArgs>(args: SelectSubset<T, ENotificationDeleteArgs<ExtArgs>>): Prisma__ENotificationClient<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ENotification.
     * @param {ENotificationUpdateArgs} args - Arguments to update one ENotification.
     * @example
     * // Update one ENotification
     * const eNotification = await prisma.eNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ENotificationUpdateArgs>(args: SelectSubset<T, ENotificationUpdateArgs<ExtArgs>>): Prisma__ENotificationClient<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ENotifications.
     * @param {ENotificationDeleteManyArgs} args - Arguments to filter ENotifications to delete.
     * @example
     * // Delete a few ENotifications
     * const { count } = await prisma.eNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ENotificationDeleteManyArgs>(args?: SelectSubset<T, ENotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ENotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ENotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ENotifications
     * const eNotification = await prisma.eNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ENotificationUpdateManyArgs>(args: SelectSubset<T, ENotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ENotifications and returns the data updated in the database.
     * @param {ENotificationUpdateManyAndReturnArgs} args - Arguments to update many ENotifications.
     * @example
     * // Update many ENotifications
     * const eNotification = await prisma.eNotification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ENotifications and only return the `id`
     * const eNotificationWithIdOnly = await prisma.eNotification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ENotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, ENotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ENotification.
     * @param {ENotificationUpsertArgs} args - Arguments to update or create a ENotification.
     * @example
     * // Update or create a ENotification
     * const eNotification = await prisma.eNotification.upsert({
     *   create: {
     *     // ... data to create a ENotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ENotification we want to update
     *   }
     * })
     */
    upsert<T extends ENotificationUpsertArgs>(args: SelectSubset<T, ENotificationUpsertArgs<ExtArgs>>): Prisma__ENotificationClient<$Result.GetResult<Prisma.$ENotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ENotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ENotificationCountArgs} args - Arguments to filter ENotifications to count.
     * @example
     * // Count the number of ENotifications
     * const count = await prisma.eNotification.count({
     *   where: {
     *     // ... the filter for the ENotifications we want to count
     *   }
     * })
    **/
    count<T extends ENotificationCountArgs>(
      args?: Subset<T, ENotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ENotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ENotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ENotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ENotificationAggregateArgs>(args: Subset<T, ENotificationAggregateArgs>): Prisma.PrismaPromise<GetENotificationAggregateType<T>>

    /**
     * Group by ENotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ENotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ENotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ENotificationGroupByArgs['orderBy'] }
        : { orderBy?: ENotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ENotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetENotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ENotification model
   */
  readonly fields: ENotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ENotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ENotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    branch<T extends EBranchDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EBranchDefaultArgs<ExtArgs>>): Prisma__EBranchClient<$Result.GetResult<Prisma.$EBranchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ENotification model
   */
  interface ENotificationFieldRefs {
    readonly id: FieldRef<"ENotification", 'String'>
    readonly branchId: FieldRef<"ENotification", 'String'>
    readonly type: FieldRef<"ENotification", 'String'>
    readonly title: FieldRef<"ENotification", 'String'>
    readonly message: FieldRef<"ENotification", 'String'>
    readonly read: FieldRef<"ENotification", 'Boolean'>
    readonly createdAt: FieldRef<"ENotification", 'DateTime'>
    readonly available: FieldRef<"ENotification", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ENotification findUnique
   */
  export type ENotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    /**
     * Filter, which ENotification to fetch.
     */
    where: ENotificationWhereUniqueInput
  }

  /**
   * ENotification findUniqueOrThrow
   */
  export type ENotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    /**
     * Filter, which ENotification to fetch.
     */
    where: ENotificationWhereUniqueInput
  }

  /**
   * ENotification findFirst
   */
  export type ENotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    /**
     * Filter, which ENotification to fetch.
     */
    where?: ENotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ENotifications to fetch.
     */
    orderBy?: ENotificationOrderByWithRelationInput | ENotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ENotifications.
     */
    cursor?: ENotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ENotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ENotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ENotifications.
     */
    distinct?: ENotificationScalarFieldEnum | ENotificationScalarFieldEnum[]
  }

  /**
   * ENotification findFirstOrThrow
   */
  export type ENotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    /**
     * Filter, which ENotification to fetch.
     */
    where?: ENotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ENotifications to fetch.
     */
    orderBy?: ENotificationOrderByWithRelationInput | ENotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ENotifications.
     */
    cursor?: ENotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ENotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ENotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ENotifications.
     */
    distinct?: ENotificationScalarFieldEnum | ENotificationScalarFieldEnum[]
  }

  /**
   * ENotification findMany
   */
  export type ENotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    /**
     * Filter, which ENotifications to fetch.
     */
    where?: ENotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ENotifications to fetch.
     */
    orderBy?: ENotificationOrderByWithRelationInput | ENotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ENotifications.
     */
    cursor?: ENotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ENotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ENotifications.
     */
    skip?: number
    distinct?: ENotificationScalarFieldEnum | ENotificationScalarFieldEnum[]
  }

  /**
   * ENotification create
   */
  export type ENotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a ENotification.
     */
    data: XOR<ENotificationCreateInput, ENotificationUncheckedCreateInput>
  }

  /**
   * ENotification createMany
   */
  export type ENotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ENotifications.
     */
    data: ENotificationCreateManyInput | ENotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ENotification createManyAndReturn
   */
  export type ENotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * The data used to create many ENotifications.
     */
    data: ENotificationCreateManyInput | ENotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ENotification update
   */
  export type ENotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a ENotification.
     */
    data: XOR<ENotificationUpdateInput, ENotificationUncheckedUpdateInput>
    /**
     * Choose, which ENotification to update.
     */
    where: ENotificationWhereUniqueInput
  }

  /**
   * ENotification updateMany
   */
  export type ENotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ENotifications.
     */
    data: XOR<ENotificationUpdateManyMutationInput, ENotificationUncheckedUpdateManyInput>
    /**
     * Filter which ENotifications to update
     */
    where?: ENotificationWhereInput
    /**
     * Limit how many ENotifications to update.
     */
    limit?: number
  }

  /**
   * ENotification updateManyAndReturn
   */
  export type ENotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * The data used to update ENotifications.
     */
    data: XOR<ENotificationUpdateManyMutationInput, ENotificationUncheckedUpdateManyInput>
    /**
     * Filter which ENotifications to update
     */
    where?: ENotificationWhereInput
    /**
     * Limit how many ENotifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ENotification upsert
   */
  export type ENotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the ENotification to update in case it exists.
     */
    where: ENotificationWhereUniqueInput
    /**
     * In case the ENotification found by the `where` argument doesn't exist, create a new ENotification with this data.
     */
    create: XOR<ENotificationCreateInput, ENotificationUncheckedCreateInput>
    /**
     * In case the ENotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ENotificationUpdateInput, ENotificationUncheckedUpdateInput>
  }

  /**
   * ENotification delete
   */
  export type ENotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
    /**
     * Filter which ENotification to delete.
     */
    where: ENotificationWhereUniqueInput
  }

  /**
   * ENotification deleteMany
   */
  export type ENotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ENotifications to delete
     */
    where?: ENotificationWhereInput
    /**
     * Limit how many ENotifications to delete.
     */
    limit?: number
  }

  /**
   * ENotification without action
   */
  export type ENotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ENotification
     */
    select?: ENotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ENotification
     */
    omit?: ENotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ENotificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const EBranchProductScalarFieldEnum: {
    id: 'id',
    branchId: 'branchId',
    productId: 'productId',
    colorCode: 'colorCode',
    stock: 'stock',
    available: 'available'
  };

  export type EBranchProductScalarFieldEnum = (typeof EBranchProductScalarFieldEnum)[keyof typeof EBranchProductScalarFieldEnum]


  export const EBranchScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    available: 'available'
  };

  export type EBranchScalarFieldEnum = (typeof EBranchScalarFieldEnum)[keyof typeof EBranchScalarFieldEnum]


  export const ENotificationScalarFieldEnum: {
    id: 'id',
    branchId: 'branchId',
    type: 'type',
    title: 'title',
    message: 'message',
    read: 'read',
    createdAt: 'createdAt',
    available: 'available'
  };

  export type ENotificationScalarFieldEnum = (typeof ENotificationScalarFieldEnum)[keyof typeof ENotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type EBranchProductWhereInput = {
    AND?: EBranchProductWhereInput | EBranchProductWhereInput[]
    OR?: EBranchProductWhereInput[]
    NOT?: EBranchProductWhereInput | EBranchProductWhereInput[]
    id?: StringFilter<"EBranchProduct"> | string
    branchId?: StringFilter<"EBranchProduct"> | string
    productId?: StringFilter<"EBranchProduct"> | string
    colorCode?: StringFilter<"EBranchProduct"> | string
    stock?: IntFilter<"EBranchProduct"> | number
    available?: BoolFilter<"EBranchProduct"> | boolean
    branch?: XOR<EBranchScalarRelationFilter, EBranchWhereInput>
  }

  export type EBranchProductOrderByWithRelationInput = {
    id?: SortOrder
    branchId?: SortOrder
    productId?: SortOrder
    colorCode?: SortOrder
    stock?: SortOrder
    available?: SortOrder
    branch?: EBranchOrderByWithRelationInput
  }

  export type EBranchProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    branchId_productId?: EBranchProductBranchId_productIdCompoundUniqueInput
    AND?: EBranchProductWhereInput | EBranchProductWhereInput[]
    OR?: EBranchProductWhereInput[]
    NOT?: EBranchProductWhereInput | EBranchProductWhereInput[]
    branchId?: StringFilter<"EBranchProduct"> | string
    productId?: StringFilter<"EBranchProduct"> | string
    colorCode?: StringFilter<"EBranchProduct"> | string
    stock?: IntFilter<"EBranchProduct"> | number
    available?: BoolFilter<"EBranchProduct"> | boolean
    branch?: XOR<EBranchScalarRelationFilter, EBranchWhereInput>
  }, "id" | "branchId_productId">

  export type EBranchProductOrderByWithAggregationInput = {
    id?: SortOrder
    branchId?: SortOrder
    productId?: SortOrder
    colorCode?: SortOrder
    stock?: SortOrder
    available?: SortOrder
    _count?: EBranchProductCountOrderByAggregateInput
    _avg?: EBranchProductAvgOrderByAggregateInput
    _max?: EBranchProductMaxOrderByAggregateInput
    _min?: EBranchProductMinOrderByAggregateInput
    _sum?: EBranchProductSumOrderByAggregateInput
  }

  export type EBranchProductScalarWhereWithAggregatesInput = {
    AND?: EBranchProductScalarWhereWithAggregatesInput | EBranchProductScalarWhereWithAggregatesInput[]
    OR?: EBranchProductScalarWhereWithAggregatesInput[]
    NOT?: EBranchProductScalarWhereWithAggregatesInput | EBranchProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EBranchProduct"> | string
    branchId?: StringWithAggregatesFilter<"EBranchProduct"> | string
    productId?: StringWithAggregatesFilter<"EBranchProduct"> | string
    colorCode?: StringWithAggregatesFilter<"EBranchProduct"> | string
    stock?: IntWithAggregatesFilter<"EBranchProduct"> | number
    available?: BoolWithAggregatesFilter<"EBranchProduct"> | boolean
  }

  export type EBranchWhereInput = {
    AND?: EBranchWhereInput | EBranchWhereInput[]
    OR?: EBranchWhereInput[]
    NOT?: EBranchWhereInput | EBranchWhereInput[]
    id?: StringFilter<"EBranch"> | string
    name?: StringFilter<"EBranch"> | string
    location?: StringFilter<"EBranch"> | string
    available?: BoolFilter<"EBranch"> | boolean
    branchProducts?: EBranchProductListRelationFilter
    Notification?: ENotificationListRelationFilter
  }

  export type EBranchOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    available?: SortOrder
    branchProducts?: EBranchProductOrderByRelationAggregateInput
    Notification?: ENotificationOrderByRelationAggregateInput
  }

  export type EBranchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EBranchWhereInput | EBranchWhereInput[]
    OR?: EBranchWhereInput[]
    NOT?: EBranchWhereInput | EBranchWhereInput[]
    name?: StringFilter<"EBranch"> | string
    location?: StringFilter<"EBranch"> | string
    available?: BoolFilter<"EBranch"> | boolean
    branchProducts?: EBranchProductListRelationFilter
    Notification?: ENotificationListRelationFilter
  }, "id">

  export type EBranchOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    available?: SortOrder
    _count?: EBranchCountOrderByAggregateInput
    _max?: EBranchMaxOrderByAggregateInput
    _min?: EBranchMinOrderByAggregateInput
  }

  export type EBranchScalarWhereWithAggregatesInput = {
    AND?: EBranchScalarWhereWithAggregatesInput | EBranchScalarWhereWithAggregatesInput[]
    OR?: EBranchScalarWhereWithAggregatesInput[]
    NOT?: EBranchScalarWhereWithAggregatesInput | EBranchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EBranch"> | string
    name?: StringWithAggregatesFilter<"EBranch"> | string
    location?: StringWithAggregatesFilter<"EBranch"> | string
    available?: BoolWithAggregatesFilter<"EBranch"> | boolean
  }

  export type ENotificationWhereInput = {
    AND?: ENotificationWhereInput | ENotificationWhereInput[]
    OR?: ENotificationWhereInput[]
    NOT?: ENotificationWhereInput | ENotificationWhereInput[]
    id?: StringFilter<"ENotification"> | string
    branchId?: StringFilter<"ENotification"> | string
    type?: StringFilter<"ENotification"> | string
    title?: StringFilter<"ENotification"> | string
    message?: StringFilter<"ENotification"> | string
    read?: BoolFilter<"ENotification"> | boolean
    createdAt?: DateTimeFilter<"ENotification"> | Date | string
    available?: BoolFilter<"ENotification"> | boolean
    branch?: XOR<EBranchScalarRelationFilter, EBranchWhereInput>
  }

  export type ENotificationOrderByWithRelationInput = {
    id?: SortOrder
    branchId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    available?: SortOrder
    branch?: EBranchOrderByWithRelationInput
  }

  export type ENotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ENotificationWhereInput | ENotificationWhereInput[]
    OR?: ENotificationWhereInput[]
    NOT?: ENotificationWhereInput | ENotificationWhereInput[]
    branchId?: StringFilter<"ENotification"> | string
    type?: StringFilter<"ENotification"> | string
    title?: StringFilter<"ENotification"> | string
    message?: StringFilter<"ENotification"> | string
    read?: BoolFilter<"ENotification"> | boolean
    createdAt?: DateTimeFilter<"ENotification"> | Date | string
    available?: BoolFilter<"ENotification"> | boolean
    branch?: XOR<EBranchScalarRelationFilter, EBranchWhereInput>
  }, "id">

  export type ENotificationOrderByWithAggregationInput = {
    id?: SortOrder
    branchId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    available?: SortOrder
    _count?: ENotificationCountOrderByAggregateInput
    _max?: ENotificationMaxOrderByAggregateInput
    _min?: ENotificationMinOrderByAggregateInput
  }

  export type ENotificationScalarWhereWithAggregatesInput = {
    AND?: ENotificationScalarWhereWithAggregatesInput | ENotificationScalarWhereWithAggregatesInput[]
    OR?: ENotificationScalarWhereWithAggregatesInput[]
    NOT?: ENotificationScalarWhereWithAggregatesInput | ENotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ENotification"> | string
    branchId?: StringWithAggregatesFilter<"ENotification"> | string
    type?: StringWithAggregatesFilter<"ENotification"> | string
    title?: StringWithAggregatesFilter<"ENotification"> | string
    message?: StringWithAggregatesFilter<"ENotification"> | string
    read?: BoolWithAggregatesFilter<"ENotification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ENotification"> | Date | string
    available?: BoolWithAggregatesFilter<"ENotification"> | boolean
  }

  export type EBranchProductCreateInput = {
    id?: string
    productId: string
    colorCode: string
    stock: number
    available?: boolean
    branch: EBranchCreateNestedOneWithoutBranchProductsInput
  }

  export type EBranchProductUncheckedCreateInput = {
    id?: string
    branchId: string
    productId: string
    colorCode: string
    stock: number
    available?: boolean
  }

  export type EBranchProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    colorCode?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
    branch?: EBranchUpdateOneRequiredWithoutBranchProductsNestedInput
  }

  export type EBranchProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    colorCode?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EBranchProductCreateManyInput = {
    id?: string
    branchId: string
    productId: string
    colorCode: string
    stock: number
    available?: boolean
  }

  export type EBranchProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    colorCode?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EBranchProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    colorCode?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EBranchCreateInput = {
    id?: string
    name: string
    location: string
    available?: boolean
    branchProducts?: EBranchProductCreateNestedManyWithoutBranchInput
    Notification?: ENotificationCreateNestedManyWithoutBranchInput
  }

  export type EBranchUncheckedCreateInput = {
    id?: string
    name: string
    location: string
    available?: boolean
    branchProducts?: EBranchProductUncheckedCreateNestedManyWithoutBranchInput
    Notification?: ENotificationUncheckedCreateNestedManyWithoutBranchInput
  }

  export type EBranchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    branchProducts?: EBranchProductUpdateManyWithoutBranchNestedInput
    Notification?: ENotificationUpdateManyWithoutBranchNestedInput
  }

  export type EBranchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    branchProducts?: EBranchProductUncheckedUpdateManyWithoutBranchNestedInput
    Notification?: ENotificationUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type EBranchCreateManyInput = {
    id?: string
    name: string
    location: string
    available?: boolean
  }

  export type EBranchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EBranchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ENotificationCreateInput = {
    id?: string
    type: string
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    available?: boolean
    branch: EBranchCreateNestedOneWithoutNotificationInput
  }

  export type ENotificationUncheckedCreateInput = {
    id?: string
    branchId: string
    type: string
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    available?: boolean
  }

  export type ENotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
    branch?: EBranchUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type ENotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ENotificationCreateManyInput = {
    id?: string
    branchId: string
    type: string
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    available?: boolean
  }

  export type ENotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ENotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    branchId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EBranchScalarRelationFilter = {
    is?: EBranchWhereInput
    isNot?: EBranchWhereInput
  }

  export type EBranchProductBranchId_productIdCompoundUniqueInput = {
    branchId: string
    productId: string
  }

  export type EBranchProductCountOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    productId?: SortOrder
    colorCode?: SortOrder
    stock?: SortOrder
    available?: SortOrder
  }

  export type EBranchProductAvgOrderByAggregateInput = {
    stock?: SortOrder
  }

  export type EBranchProductMaxOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    productId?: SortOrder
    colorCode?: SortOrder
    stock?: SortOrder
    available?: SortOrder
  }

  export type EBranchProductMinOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    productId?: SortOrder
    colorCode?: SortOrder
    stock?: SortOrder
    available?: SortOrder
  }

  export type EBranchProductSumOrderByAggregateInput = {
    stock?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EBranchProductListRelationFilter = {
    every?: EBranchProductWhereInput
    some?: EBranchProductWhereInput
    none?: EBranchProductWhereInput
  }

  export type ENotificationListRelationFilter = {
    every?: ENotificationWhereInput
    some?: ENotificationWhereInput
    none?: ENotificationWhereInput
  }

  export type EBranchProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ENotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EBranchCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    available?: SortOrder
  }

  export type EBranchMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    available?: SortOrder
  }

  export type EBranchMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    available?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ENotificationCountOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    available?: SortOrder
  }

  export type ENotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    available?: SortOrder
  }

  export type ENotificationMinOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    available?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EBranchCreateNestedOneWithoutBranchProductsInput = {
    create?: XOR<EBranchCreateWithoutBranchProductsInput, EBranchUncheckedCreateWithoutBranchProductsInput>
    connectOrCreate?: EBranchCreateOrConnectWithoutBranchProductsInput
    connect?: EBranchWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EBranchUpdateOneRequiredWithoutBranchProductsNestedInput = {
    create?: XOR<EBranchCreateWithoutBranchProductsInput, EBranchUncheckedCreateWithoutBranchProductsInput>
    connectOrCreate?: EBranchCreateOrConnectWithoutBranchProductsInput
    upsert?: EBranchUpsertWithoutBranchProductsInput
    connect?: EBranchWhereUniqueInput
    update?: XOR<XOR<EBranchUpdateToOneWithWhereWithoutBranchProductsInput, EBranchUpdateWithoutBranchProductsInput>, EBranchUncheckedUpdateWithoutBranchProductsInput>
  }

  export type EBranchProductCreateNestedManyWithoutBranchInput = {
    create?: XOR<EBranchProductCreateWithoutBranchInput, EBranchProductUncheckedCreateWithoutBranchInput> | EBranchProductCreateWithoutBranchInput[] | EBranchProductUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: EBranchProductCreateOrConnectWithoutBranchInput | EBranchProductCreateOrConnectWithoutBranchInput[]
    createMany?: EBranchProductCreateManyBranchInputEnvelope
    connect?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
  }

  export type ENotificationCreateNestedManyWithoutBranchInput = {
    create?: XOR<ENotificationCreateWithoutBranchInput, ENotificationUncheckedCreateWithoutBranchInput> | ENotificationCreateWithoutBranchInput[] | ENotificationUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ENotificationCreateOrConnectWithoutBranchInput | ENotificationCreateOrConnectWithoutBranchInput[]
    createMany?: ENotificationCreateManyBranchInputEnvelope
    connect?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
  }

  export type EBranchProductUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<EBranchProductCreateWithoutBranchInput, EBranchProductUncheckedCreateWithoutBranchInput> | EBranchProductCreateWithoutBranchInput[] | EBranchProductUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: EBranchProductCreateOrConnectWithoutBranchInput | EBranchProductCreateOrConnectWithoutBranchInput[]
    createMany?: EBranchProductCreateManyBranchInputEnvelope
    connect?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
  }

  export type ENotificationUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<ENotificationCreateWithoutBranchInput, ENotificationUncheckedCreateWithoutBranchInput> | ENotificationCreateWithoutBranchInput[] | ENotificationUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ENotificationCreateOrConnectWithoutBranchInput | ENotificationCreateOrConnectWithoutBranchInput[]
    createMany?: ENotificationCreateManyBranchInputEnvelope
    connect?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
  }

  export type EBranchProductUpdateManyWithoutBranchNestedInput = {
    create?: XOR<EBranchProductCreateWithoutBranchInput, EBranchProductUncheckedCreateWithoutBranchInput> | EBranchProductCreateWithoutBranchInput[] | EBranchProductUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: EBranchProductCreateOrConnectWithoutBranchInput | EBranchProductCreateOrConnectWithoutBranchInput[]
    upsert?: EBranchProductUpsertWithWhereUniqueWithoutBranchInput | EBranchProductUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: EBranchProductCreateManyBranchInputEnvelope
    set?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
    disconnect?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
    delete?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
    connect?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
    update?: EBranchProductUpdateWithWhereUniqueWithoutBranchInput | EBranchProductUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: EBranchProductUpdateManyWithWhereWithoutBranchInput | EBranchProductUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: EBranchProductScalarWhereInput | EBranchProductScalarWhereInput[]
  }

  export type ENotificationUpdateManyWithoutBranchNestedInput = {
    create?: XOR<ENotificationCreateWithoutBranchInput, ENotificationUncheckedCreateWithoutBranchInput> | ENotificationCreateWithoutBranchInput[] | ENotificationUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ENotificationCreateOrConnectWithoutBranchInput | ENotificationCreateOrConnectWithoutBranchInput[]
    upsert?: ENotificationUpsertWithWhereUniqueWithoutBranchInput | ENotificationUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: ENotificationCreateManyBranchInputEnvelope
    set?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
    disconnect?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
    delete?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
    connect?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
    update?: ENotificationUpdateWithWhereUniqueWithoutBranchInput | ENotificationUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: ENotificationUpdateManyWithWhereWithoutBranchInput | ENotificationUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: ENotificationScalarWhereInput | ENotificationScalarWhereInput[]
  }

  export type EBranchProductUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<EBranchProductCreateWithoutBranchInput, EBranchProductUncheckedCreateWithoutBranchInput> | EBranchProductCreateWithoutBranchInput[] | EBranchProductUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: EBranchProductCreateOrConnectWithoutBranchInput | EBranchProductCreateOrConnectWithoutBranchInput[]
    upsert?: EBranchProductUpsertWithWhereUniqueWithoutBranchInput | EBranchProductUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: EBranchProductCreateManyBranchInputEnvelope
    set?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
    disconnect?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
    delete?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
    connect?: EBranchProductWhereUniqueInput | EBranchProductWhereUniqueInput[]
    update?: EBranchProductUpdateWithWhereUniqueWithoutBranchInput | EBranchProductUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: EBranchProductUpdateManyWithWhereWithoutBranchInput | EBranchProductUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: EBranchProductScalarWhereInput | EBranchProductScalarWhereInput[]
  }

  export type ENotificationUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<ENotificationCreateWithoutBranchInput, ENotificationUncheckedCreateWithoutBranchInput> | ENotificationCreateWithoutBranchInput[] | ENotificationUncheckedCreateWithoutBranchInput[]
    connectOrCreate?: ENotificationCreateOrConnectWithoutBranchInput | ENotificationCreateOrConnectWithoutBranchInput[]
    upsert?: ENotificationUpsertWithWhereUniqueWithoutBranchInput | ENotificationUpsertWithWhereUniqueWithoutBranchInput[]
    createMany?: ENotificationCreateManyBranchInputEnvelope
    set?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
    disconnect?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
    delete?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
    connect?: ENotificationWhereUniqueInput | ENotificationWhereUniqueInput[]
    update?: ENotificationUpdateWithWhereUniqueWithoutBranchInput | ENotificationUpdateWithWhereUniqueWithoutBranchInput[]
    updateMany?: ENotificationUpdateManyWithWhereWithoutBranchInput | ENotificationUpdateManyWithWhereWithoutBranchInput[]
    deleteMany?: ENotificationScalarWhereInput | ENotificationScalarWhereInput[]
  }

  export type EBranchCreateNestedOneWithoutNotificationInput = {
    create?: XOR<EBranchCreateWithoutNotificationInput, EBranchUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: EBranchCreateOrConnectWithoutNotificationInput
    connect?: EBranchWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EBranchUpdateOneRequiredWithoutNotificationNestedInput = {
    create?: XOR<EBranchCreateWithoutNotificationInput, EBranchUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: EBranchCreateOrConnectWithoutNotificationInput
    upsert?: EBranchUpsertWithoutNotificationInput
    connect?: EBranchWhereUniqueInput
    update?: XOR<XOR<EBranchUpdateToOneWithWhereWithoutNotificationInput, EBranchUpdateWithoutNotificationInput>, EBranchUncheckedUpdateWithoutNotificationInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EBranchCreateWithoutBranchProductsInput = {
    id?: string
    name: string
    location: string
    available?: boolean
    Notification?: ENotificationCreateNestedManyWithoutBranchInput
  }

  export type EBranchUncheckedCreateWithoutBranchProductsInput = {
    id?: string
    name: string
    location: string
    available?: boolean
    Notification?: ENotificationUncheckedCreateNestedManyWithoutBranchInput
  }

  export type EBranchCreateOrConnectWithoutBranchProductsInput = {
    where: EBranchWhereUniqueInput
    create: XOR<EBranchCreateWithoutBranchProductsInput, EBranchUncheckedCreateWithoutBranchProductsInput>
  }

  export type EBranchUpsertWithoutBranchProductsInput = {
    update: XOR<EBranchUpdateWithoutBranchProductsInput, EBranchUncheckedUpdateWithoutBranchProductsInput>
    create: XOR<EBranchCreateWithoutBranchProductsInput, EBranchUncheckedCreateWithoutBranchProductsInput>
    where?: EBranchWhereInput
  }

  export type EBranchUpdateToOneWithWhereWithoutBranchProductsInput = {
    where?: EBranchWhereInput
    data: XOR<EBranchUpdateWithoutBranchProductsInput, EBranchUncheckedUpdateWithoutBranchProductsInput>
  }

  export type EBranchUpdateWithoutBranchProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    Notification?: ENotificationUpdateManyWithoutBranchNestedInput
  }

  export type EBranchUncheckedUpdateWithoutBranchProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    Notification?: ENotificationUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type EBranchProductCreateWithoutBranchInput = {
    id?: string
    productId: string
    colorCode: string
    stock: number
    available?: boolean
  }

  export type EBranchProductUncheckedCreateWithoutBranchInput = {
    id?: string
    productId: string
    colorCode: string
    stock: number
    available?: boolean
  }

  export type EBranchProductCreateOrConnectWithoutBranchInput = {
    where: EBranchProductWhereUniqueInput
    create: XOR<EBranchProductCreateWithoutBranchInput, EBranchProductUncheckedCreateWithoutBranchInput>
  }

  export type EBranchProductCreateManyBranchInputEnvelope = {
    data: EBranchProductCreateManyBranchInput | EBranchProductCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type ENotificationCreateWithoutBranchInput = {
    id?: string
    type: string
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    available?: boolean
  }

  export type ENotificationUncheckedCreateWithoutBranchInput = {
    id?: string
    type: string
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    available?: boolean
  }

  export type ENotificationCreateOrConnectWithoutBranchInput = {
    where: ENotificationWhereUniqueInput
    create: XOR<ENotificationCreateWithoutBranchInput, ENotificationUncheckedCreateWithoutBranchInput>
  }

  export type ENotificationCreateManyBranchInputEnvelope = {
    data: ENotificationCreateManyBranchInput | ENotificationCreateManyBranchInput[]
    skipDuplicates?: boolean
  }

  export type EBranchProductUpsertWithWhereUniqueWithoutBranchInput = {
    where: EBranchProductWhereUniqueInput
    update: XOR<EBranchProductUpdateWithoutBranchInput, EBranchProductUncheckedUpdateWithoutBranchInput>
    create: XOR<EBranchProductCreateWithoutBranchInput, EBranchProductUncheckedCreateWithoutBranchInput>
  }

  export type EBranchProductUpdateWithWhereUniqueWithoutBranchInput = {
    where: EBranchProductWhereUniqueInput
    data: XOR<EBranchProductUpdateWithoutBranchInput, EBranchProductUncheckedUpdateWithoutBranchInput>
  }

  export type EBranchProductUpdateManyWithWhereWithoutBranchInput = {
    where: EBranchProductScalarWhereInput
    data: XOR<EBranchProductUpdateManyMutationInput, EBranchProductUncheckedUpdateManyWithoutBranchInput>
  }

  export type EBranchProductScalarWhereInput = {
    AND?: EBranchProductScalarWhereInput | EBranchProductScalarWhereInput[]
    OR?: EBranchProductScalarWhereInput[]
    NOT?: EBranchProductScalarWhereInput | EBranchProductScalarWhereInput[]
    id?: StringFilter<"EBranchProduct"> | string
    branchId?: StringFilter<"EBranchProduct"> | string
    productId?: StringFilter<"EBranchProduct"> | string
    colorCode?: StringFilter<"EBranchProduct"> | string
    stock?: IntFilter<"EBranchProduct"> | number
    available?: BoolFilter<"EBranchProduct"> | boolean
  }

  export type ENotificationUpsertWithWhereUniqueWithoutBranchInput = {
    where: ENotificationWhereUniqueInput
    update: XOR<ENotificationUpdateWithoutBranchInput, ENotificationUncheckedUpdateWithoutBranchInput>
    create: XOR<ENotificationCreateWithoutBranchInput, ENotificationUncheckedCreateWithoutBranchInput>
  }

  export type ENotificationUpdateWithWhereUniqueWithoutBranchInput = {
    where: ENotificationWhereUniqueInput
    data: XOR<ENotificationUpdateWithoutBranchInput, ENotificationUncheckedUpdateWithoutBranchInput>
  }

  export type ENotificationUpdateManyWithWhereWithoutBranchInput = {
    where: ENotificationScalarWhereInput
    data: XOR<ENotificationUpdateManyMutationInput, ENotificationUncheckedUpdateManyWithoutBranchInput>
  }

  export type ENotificationScalarWhereInput = {
    AND?: ENotificationScalarWhereInput | ENotificationScalarWhereInput[]
    OR?: ENotificationScalarWhereInput[]
    NOT?: ENotificationScalarWhereInput | ENotificationScalarWhereInput[]
    id?: StringFilter<"ENotification"> | string
    branchId?: StringFilter<"ENotification"> | string
    type?: StringFilter<"ENotification"> | string
    title?: StringFilter<"ENotification"> | string
    message?: StringFilter<"ENotification"> | string
    read?: BoolFilter<"ENotification"> | boolean
    createdAt?: DateTimeFilter<"ENotification"> | Date | string
    available?: BoolFilter<"ENotification"> | boolean
  }

  export type EBranchCreateWithoutNotificationInput = {
    id?: string
    name: string
    location: string
    available?: boolean
    branchProducts?: EBranchProductCreateNestedManyWithoutBranchInput
  }

  export type EBranchUncheckedCreateWithoutNotificationInput = {
    id?: string
    name: string
    location: string
    available?: boolean
    branchProducts?: EBranchProductUncheckedCreateNestedManyWithoutBranchInput
  }

  export type EBranchCreateOrConnectWithoutNotificationInput = {
    where: EBranchWhereUniqueInput
    create: XOR<EBranchCreateWithoutNotificationInput, EBranchUncheckedCreateWithoutNotificationInput>
  }

  export type EBranchUpsertWithoutNotificationInput = {
    update: XOR<EBranchUpdateWithoutNotificationInput, EBranchUncheckedUpdateWithoutNotificationInput>
    create: XOR<EBranchCreateWithoutNotificationInput, EBranchUncheckedCreateWithoutNotificationInput>
    where?: EBranchWhereInput
  }

  export type EBranchUpdateToOneWithWhereWithoutNotificationInput = {
    where?: EBranchWhereInput
    data: XOR<EBranchUpdateWithoutNotificationInput, EBranchUncheckedUpdateWithoutNotificationInput>
  }

  export type EBranchUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    branchProducts?: EBranchProductUpdateManyWithoutBranchNestedInput
  }

  export type EBranchUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    available?: BoolFieldUpdateOperationsInput | boolean
    branchProducts?: EBranchProductUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type EBranchProductCreateManyBranchInput = {
    id?: string
    productId: string
    colorCode: string
    stock: number
    available?: boolean
  }

  export type ENotificationCreateManyBranchInput = {
    id?: string
    type: string
    title: string
    message: string
    read?: boolean
    createdAt?: Date | string
    available?: boolean
  }

  export type EBranchProductUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    colorCode?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EBranchProductUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    colorCode?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EBranchProductUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    colorCode?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ENotificationUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ENotificationUncheckedUpdateWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ENotificationUncheckedUpdateManyWithoutBranchInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    available?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}